name: PyTest CI
description: 'Tests a Python application using PyTest and flake8'

inputs:
  python_version:
    description: 'Required Python version'
    required: true
  pytest_coverage_xml_file_name:
    description: 'PyTest coverage report path'
    required: false
    default: ''
  pytest_coverage_fail_percent:
    description: 'Fails if coverage is under this percent'
    required: false
    default: 0
  source_dir:
    description: 'Source directory for the python application'
    required: true
  poetry_version:
    description: 'Required Poetry version'
    required: false
    default: '1.8.3'
  pipx_packages:
    description: 'Packages to install independantly using pipx'
    required: false
    default: 'black flake8 mypy bandit pytest flake8-bugbear'
  
runs:
  using: 'composite'
  steps:
    # caching pipx: https://github.com/pypa/pipx/discussions/1051
  - name: Setup Local Variables
    id: variable_setup
    run: |
      echo "pipx_home=$PIPX_HOME" >> $GITHUB_OUTPUT
      echo "pipx_bin_dir=$PIPX_BIN_DIR" >> $GITHUB_OUTPUT
      export BASE64_PIPX_ID=$(echo -n 'poetry==${{ inputs.poetry_version }} ${{ inputs.pipx_packages }}' | base64)
      echo -n "$BASE64_PIPX_ID"
      echo "cache_key_pipx=pipx-${{ runner.os }}-${{ inputs.python_version }}-$BASE64_PIPX_ID" >> $GITHUB_OUTPUT
    shell: bash

  - name: Cache pipx
    id: cache_pipx
    uses: actions/cache@v3
    with:
      # https://pypa.github.io/pipx/how-pipx-works
      path: |
        ${{ steps.variable_setup.outputs.pipx_home }}
        ${{ steps.variable_setup.outputs.pipx_bin_dir }}
      key: ${{ steps.variable_setup.outputs.cache_key_pipx }}

  - name: Install Poetry ${{ inputs.poetry_version }} and '${{ steps.variable_setup.outputs.pipx_packages }}'
    if: ${{ steps.cache_pipx.outputs.cache-hit != 'true' }}
    run: |
      for tool in "poetry==${{ inputs.poetry_version }}" ${{ inputs.pipx_packages }}; do
        pipx install $tool
      done
      # Resolves https://github.com/python-poetry/poetry/issues/7611
      poetry self add setuptools==68.1.2
    shell: bash

  - name: Debug pipx
    run: |
      pipx ensurepath
      pipx list
    shell: bash

  - name: Set up Python
    uses: actions/setup-python@v4
    id: setup_python
    with:
      python-version: ${{ inputs.python_version }}
      cache: poetry

  - name: Poetry config
    run: |
      poetry config virtualenvs.in-project true --local
    shell: bash

  - name: Cache Poetry .venv
    uses: actions/cache@v3
    id: cached_poetry_dependencies
    with:
      path: .venv
      key: venv-${{ runner.os }}-${{ inputs.python_version }}-${{ inputs.poetry_version }}-${{ hashFiles('**/poetry.lock') }}

  - name: Install Poetry dependencies
    if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    run: |
      poetry --no-interaction install
    shell: bash

  # Good explaination of different Python linting and formatting tools:
  # https://inventwithpython.com/blog/2022/11/19/python-linter-comparison-2022-pylint-vs-pyflakes-vs-flake8-vs-autopep8-vs-bandit-vs-prospector-vs-pylama-vs-pyroma-vs-black-vs-mypy-vs-radon-vs-mccabe/

  - name: Check Format with Black
    uses: psf/black@stable
    with:
      options: "--check --verbose --diff"
      src: "./${{ inputs.source_dir }}"

  - name: Error, Style Lint and Complexity Analysis with flake8
    shell: bash
    # with below, flake8 will run on ALL directories within $source_dir
    # to exclude directories, edit .flake8
    run: |
      # flake8 - stop the build if there are Python syntax errors or undefined names
      flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      # flake8 - exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  - name: Parse PyTest coverage xml file name option
    shell: bash
    if: ${{ inputs.pytest_coverage_xml_file_name }} != ''
    run: |
      echo "pytest_report_name_options=$(echo '--cov-report=xml:${{ inputs.pytest_coverage_xml_file_name }} --cov-report=term-missing:skip-covered')" >> $GITHUB_ENV

  - name: Parse PyTest coverage fail percent option
    shell: bash
    if: ${{ inputs.pytest_coverage_fail_percent }} != 0
    run: |
      echo "pytest_fail_percent_options=$(echo '--cov-fail-under=${{ inputs.pytest_coverage_fail_percent }}')" >> $GITHUB_ENV

  - name: Test with PyTest
    shell: bash
    run: |
       pytest --cov ${{ env.pytest_report_name_options }} ${{ env.pytest_fail_percent_options }}

  - name: Type Check with Mypy
    shell: bash
    run: |
      mypy ${{ inputs.source_dir }}

  - name: Security Lint with Bandit
    shell: bash
    run: |
      # bandit - log level low, critical issues only. Reports only if high confidence
      bandit -ll -ii -r . -x ./.venv