name: PyTest CI
description: 'Tests a Python application using PyTest and flake8'

inputs:
  python_version:
    description: 'Required Python version'
    required: true
  
runs:
  using: 'composite'
  steps:
  - name: Set up Python
    uses: actions/setup-python@v3
    with:
      python-version: ${{ inputs.python_version }}

  - name: Install dependencies
    shell: bash
    run: |
      python3 -m venv .venv
      .venv/bin/python -m pip install --upgrade pip
      .venv/bin/pip install flake8 pytest pytest-cov mypy flake8-bugbear bandit[toml]

    # Good explaination of different Python linting and formatting tools:
    # https://inventwithpython.com/blog/2022/11/19/python-linter-comparison-2022-pylint-vs-pyflakes-vs-flake8-vs-autopep8-vs-bandit-vs-prospector-vs-pylama-vs-pyroma-vs-black-vs-mypy-vs-radon-vs-mccabe/

  - name: Check Format with Black
    uses: psf/black@stable
    with:
      options: "--check --verbose --diff"
      src: "./src/python_app"

  - name: Error, Style Lint and Complexity Analysis with flake8
    shell: bash
    # with below, flake8 will run on ALL directories within src/python_app
    # to exclude directories, edit .flake8
    run: |
      # flake8 - stop the build if there are Python syntax errors or undefined names
      .venv/bin/python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      # flake8 - exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      .venv/bin/python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  - name: Test with PyTest
    shell: bash
    run: |
      .venv/bin/python -m pytest --cov

  - name: Type Check with Mypy
    shell: bash
    run: |
      .venv/bin/python -m mypy src

  - name: Security Lint with Bandit
    shell: bash
    run: |
      # bandit - log level low, critical issues only. Reports only if high confidence
      .venv/bin/python -m bandit -ll -ii -r . -x ./.venv